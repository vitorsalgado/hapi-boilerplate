language: node_js

sudo: required

services:
  - docker

cache: yarn

before_script:
  # security checkups

  - snyk auth ${SNYK_TOKEN} -d
  - snyk protect
  - snyk monitor

after_success:
  # publishing coverage reports

  - codeclimate-test-reporter < reports/coverage/lcov.info
  - yarn coveralls

  # building and publishing docker

  - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

  - APPLICATION_VERSION=$(node cli version)
  - DOCKER_IMAGE=hapi-boilerplate
  - TAG=`if [ "$TRAVIS_BRANCH" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH ; fi`

  - docker build -t $DOCKER_IMAGE .

  - docker tag $DOCKER_IMAGE $TRAVIS_REPO_SLUG:$TAG
  - docker tag $DOCKER_IMAGE $TRAVIS_REPO_SLUG:$APPLICATION_VERSION

  - docker push $TRAVIS_REPO_SLUG:$TAG
  - docker push $TRAVIS_REPO_SLUG:$APPLICATION_VERSION

  - if [ $TRAVIS_PULL_REQUEST != "false" -o $TRAVIS_BRANCH != "master" ]; then echo "Skipping deployment on branch=$TRAVIS_BRANCH, PR=$TRAVIS_PULL_REQUEST" && exit 0 ; fi

  # deploying to Heroku cloud

  - wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
  - heroku plugins:install heroku-container-registry

  - docker login --email=_ --username=_ --password=$HEROKU_API_KEY registry.heroku.com
  - docker tag $DOCKER_IMAGE registry.heroku.com/$HEROKU_APPLICATION/web
  - docker push registry.heroku.com/$HEROKU_APPLICATION/web

  - heroku ps:scale web=1 -a $HEROKU_APPLICATION

  # notifications

  - if [ $SLACK_NOTIFY != "false" ]; then node cli slack-notify-success "Hapi Boilerplate ${APPLICATION_VERSION} succesfully deployed" $SLACK_WEBHOOK $APPLICATION_VERSION ; fi

after_failure:
  - if [ $SLACK_NOTIFY != "false" ]; then node cli slack-notify-error "Hapi Boilerplate deployment failed!" $SLACK_WEBHOOK ; fi